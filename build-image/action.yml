name: Build docker image

inputs:
  ecr_repository:
    description: ECR repo to push image
    required: false
    type: string
  aws_access_key_id:
    description: AWS ECR access key id
    required: true
    type: string
  aws_secret_access_key:
    description: AWS ECR secret access key
    required: true
    type: string
  build_args:
    description: Additional docker build args
    type: string
  slack_webhook_url:
    description: Slack webhook URL for notifications
    required: false
    type: string

outputs:
  registry:
    description: "ECR registry for the image"
    value: ${{ steps.login-ecr.outputs.registry }}
  short_sha_tag: 
    description: "Short SHA tag assigned to the image"
    value: ${{ steps.current-git-details.outputs.short }}

runs:
  using: "composite"

  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Read current git details
      id: current-git-details
      shell: bash
      run: |
        echo "short=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "long=sha-$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "tag=tag-${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "tag=" >> $GITHUB_OUTPUT
        fi

    - name: Configure Amazon ECR Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check if the image already exists
      id: check-image-exists
      shell: bash
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.ecr_repository }}
        SHORT_SHA_TAG: ${{ steps.current-git-details.outputs.short }}
        REF_TAG: ${{ steps.current-git-details.outputs.tag }}
      run: |
        REF_IMAGE_EXISTS=$(docker manifest inspect $REGISTRY/$REPOSITORY:$REF_TAG > /dev/null 2>&1 && echo yes || echo no)
        SHORT_IMAGE_EXISTS=$(docker manifest inspect $REGISTRY/$REPOSITORY:$SHORT_SHA_TAG > /dev/null 2>&1 && echo yes || echo no)

        if [[ "$REF_IMAGE_EXISTS" == "yes" && "$SHORT_IMAGE_EXISTS" == "yes" ]]; then
          echo "Image already exists, skipping build step"
          echo "image_exists=true" >> $GITHUB_OUTPUT
        elif [[ -n "$REF_TAG" && "$REF_IMAGE_EXISTS" == "no" && "$SHORT_IMAGE_EXISTS" == "yes" ]]; then
          echo "Ref tag is not empty, and ref image doesn't exist, but short image does. Pulling short image and tagging it with ref tag."
          docker pull $REGISTRY/$REPOSITORY:$SHORT_SHA_TAG
          docker tag $REGISTRY/$REPOSITORY:$SHORT_SHA_TAG $REGISTRY/$REPOSITORY:$REF_TAG
          docker push $REGISTRY/$REPOSITORY:$REF_TAG
          echo "Skipping build step"
          echo "image_exists=true" >> $GITHUB_OUTPUT
        elif [[ -z "$REF_TAG" && "$REF_IMAGE_EXISTS" == "no" && "$SHORT_IMAGE_EXISTS" == "yes" ]]; then
          echo "Ref tag is empty, and ref image doesn't exist, but short image does. Skipping build step"
          echo "image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Image not found, proceeding with build step"
          echo "image_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build, tag, and push docker image to Amazon ECR
      if: steps.check-image-exists.outputs.image_exists == 'false'
      shell: bash
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.ecr_repository }}
        SHORT_SHA_TAG: ${{ steps.current-git-details.outputs.short }}
        LONG_SHA_TAG: ${{ steps.current-git-details.outputs.long }}
        REF_TAG: ${{ steps.current-git-details.outputs.tag }}
        BUILD_ARGS: ${{ inputs.build_args }}
      run: |
          TAGS="-t $REGISTRY/$REPOSITORY:$SHORT_SHA_TAG -t $REGISTRY/$REPOSITORY:$LONG_SHA_TAG"
          if [ -n "${{ steps.current-git-details.outputs.tag }}" ]; then
            TAGS="$TAGS -t $REGISTRY/$REPOSITORY:$REF_TAG"
          fi

          docker build . $TAGS $BUILD_ARGS
          docker push --all-tags $REGISTRY/$REPOSITORY

    - name: Notify Slack on failure
      if: failure() && inputs.slack_webhook_url != ''
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
        AS_REF: ${{ github.ref }}
        AS_AUTHOR: ${{ github.actor }}
      with:
        status: custom
        fields: workflow,job,commit,repo,ref,author,took
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "mrkdwn_in": ["text"],
              "text": ":x: *Docker build failed*\n*Ref:* ${{ env.AS_REF }}\n*Author:* ${{ env.AS_AUTHOR }}\n\nPlease check the CI job logs for details: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>"
            }]
          }
